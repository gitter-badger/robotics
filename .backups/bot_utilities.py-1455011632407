# -*- coding: utf-8 -*-
"""
Created on Thu Jan 28 16:34:01 2016

@author:
"""

import brickpi
import time
import random

NUMBER_OF_PARTICLES=100

def initInterface(interface, motors):
    interface.initialize()

    interface.motorEnable(motors[0])
    interface.motorEnable(motors[1])

    motorParams = interface.MotorAngleControllerParameters()
    motorParams.maxRotationAcceleration = 8.0
    motorParams.maxRotationSpeed = 13.0
    motorParams.feedForwardGain = 255/20.0
    motorParams.minPWM = 18.0
    motorParams.pidParameters.minOutput = -255.0
    motorParams.pidParameters.maxOutput = 255.0
    motorParams.pidParameters.k_p = 250.0
    motorParams.pidParameters.k_i = 709.0909
    motorParams.pidParameters.k_d = 11.0

    motorParams2 = interface.MotorAngleControllerParameters()
    motorParams2.maxRotationAcceleration = 8.0
    motorParams2.maxRotationSpeed = 13.0
    motorParams2.feedForwardGain = 255/20.0
    motorParams2.minPWM = 18.0
    motorParams2.pidParameters.minOutput = -255.0
    motorParams2.pidParameters.maxOutput = 255.0
    motorParams2.pidParameters.k_p = 150.0
    motorParams2.pidParameters.k_i = 752.1739
    motorParams2.pidParameters.k_d = 11.5

    interface.setMotorAngleControllerParameters(motors[0],motorParams)
    interface.setMotorAngleControllerParameters(motors[1],motorParams2)


def goStraight(distCm, interface, motors):
    radianPerCm = 0.3625
    angle = distCm * radianPerCm 
    interface.increaseMotorAngleReferences(motors, [angle, angle])

    while not interface.motorAngleReferencesReached(motors) :
        motorAngles = interface.getMotorAngles(motors)
        time.sleep(0.1)
        ## Maybe add a break after x seconds
    

def turn(angleDeg, interface, motors):
    radianPerDegre = 0.05622222222
    angle = angleDeg * radianPerDegre 
    interface.increaseMotorAngleReferences(motors, [angle, -angle])

    while not interface.motorAngleReferencesReached(motors) :
        motorAngles = interface.getMotorAngles(motors)
        time.sleep(0.1)

def initParticles(particleSet):
    particleSet=[]
    weight = 1/NUMBER_OF_PARTICLES
    tuple =(0,0,0)
    for i in range(NUMBER_OF_PARTICLES):
        particleSet.append([tuple,weight])


def go40Cm(interface, motors,particleSet):
    ePer10cm=1
    fPer10cm=1
    D=10
    
    for i in range(4):
        goStraight(10, interface, motors)
        for particle in particleSet:        
            particle[0][0]=particle[0][0]+(D+random.gauss(0,ePer10cm))*math.cos(particle[0][2]/(2*3.14))
            particle[0][1]=particle[0][1]+(D+random.gauss(0,ePer10cm))*math.sin(particle[0][2]/(2*3.14))
            particle[0][2]=(particle[0][2]+random.gauss(0,fPer10cm))%360

        
        for particle in particleSet:
            print "drawParticles:" + str(particle[0])

            
def turn90Deg(interface, motors,particleSet):
    gPer90=5
    turn=90

    turn(90,interface, motors)
    for particle in particleSet:
        particle[0][2]=(particle[0][2]+turn+random.gauss(0,gPer90))%360

    for particle in particleSet:
            print "drawParticles:" + str(particle[0])


    
    
